(new TestForIn()).run();

class TestForIn extends Test {
  
  var name = 'FOR-IN';
  var tests = [
    'test_forin_array',
    'test_forin_dict'/*,
    'test_forin_iterator'*/
  ];
  
  function test_forin_array {
    var a = void;
    var array0 = [10, 11, 12, 13, 14, 15];
    var array1 = [];
    
    // for-in with array identifier
    for (var a in array0) array1.add(a);
    assert_equal(a, void, 'for-in scope 1');
    assert_equal_struct(array0, array1, 'id all iteration');
    assert_equal_struct(array0, [10,11,12,13,14,15], 'id immutabile');
    
    // for-in with inline array
    for (var a in [20, 30, 40]) array1.add(a);
    assert_equal(a, void, 'for-in scope 2');
    assert_equal_struct(array1, [10,11,12,13,14,15,20,30,40], 'inline all iteration');
    
    // check scope
    for (a in [50, 60, 70]) array1.add(a);
    assert_equal(a, 70, 'for-in scope 3');
    assert_equal_struct(array1, [10,11,12,13,14,15,20,30,40,50,60,70]);
  }
  
  function test_forin_dict {
    var a = void;
    var dict0 = %[a: 10, b: 20, c: 30];
    var dict1 = %[];
    
    // for-in with dict identifier
    for (var a in dict0) dict1[a[0]] = a[1];
    assert_equal(a, void, 'for-in scope 1');
    assert_equal_struct(dict0, dict1), 'id all iteration');
    assert_equal_struct(dict0, %[a: 10, b: 20, c: 30];), 'id immutabile');
    
    // for-in with inline dict
    for (var a in %[c: 40, d: 50, e: 60]) dict1[a[0]] = a[1];
    assert_equal(a, void, 'for-in scope 2');
    assert_equal_struct(dict1, %[a: 10, b: 20, c: 40, d: 50, e: 60], 'inline all iteration');
    
    // check scope
    for (a in [e: 70, f: 80, g: [10, 20, 30]]) dict1[a[0]] = a[1];
    assert(a instanceof 'Array', 'for-in scope 3');
    assert_include(a[0], ['e', 'f', 'g'], 'for-in scope 4');
    assert_include(a[1], [70, 80, [10,20,30]], 'for-in scope 5');
    assert_equal_struct(dict1, %[a: 10, b: 20, c: 40, d: 50, e: 70, f: 80, g: [10,20,30]]);
  }
  
}

