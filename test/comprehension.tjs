Scripts.dump();

(new TestArrayComp()).run();

/** Syntax
 *    "[" expr "for" assign [ "," ( assign | predicate ) ]* "]"
 *      where
 *        assign    := SYMBOL "in" expr
 *        predicate := expr
 *
 ** Sementics
 *    the code:
 *      var a = [ expr0 for x in expr1, pred1, y in expr2, pred2, pred3 ]
 *    is syntactic sugar of:
 *      var a = [];
 *      for (var x in expr1) {
 *        if (pred1) {
 *          for (var y in expr2) {
 *            if (pred2) {
 *              if (pred3) {
 *                a.add(expr0);
 *              }
 *            }
 *          }
 *        }
 *      }
 *    NB. `generator` (in python) can't implament in TJS2 because
 *          there is not closure encolsing local variables.
 *        If we can implement generator, how the code behave below?
 *          function get_generator() {
 *            var i = 0;
 *            return ( x * i++ for x in [10,20,30] )
 *            // after returning function, what is means `i` ???
 *          }
 */

class TestArrayComp extends Test {
  
  var name = 'ARRAY COMPREHENSION';
  var tests = [
    'test_syntax',
    'test_scope',
    'test_main'
  ];
  
  function test_syntax {
    [ x for x in [10,20,30] ];
    [ x * 2 for x in [10,20,30] ];
    
    var array = [10,20,30];
    [ x for x in array ];
    [ x * 2 for x in array ];
    
    [ x * y for x in array, y in array ];
    [ x * y for x in array, y in array, z in array ];
    
    [ x for x in array, x % 20 == 0 ];
    [ x * y for x in array, x % 20 == 0, y in array, z in array ];
    
    %[ x : x for x in [10,20,30] ];
    %[ x => x for x in [10,20,30] ];
    %[ x : x * 2 for x in [10,20,30] ];
    
    var array = [10,20,30];
    %[ x : x for x in array ];
    %[ x => x for x in array ];
    %[ x : x * 2 for x in array ];
    
    %[ x => x * y for x in array, y in array ];
    %[ x => x * y for x in array, y in array, z in array ];
    
    %[ x : x for x in array, x % 20 == 0 ];
    %[ x : x * y for x in array, x % 20 == 0, y in array, z in array ];
  }
  
  function test_scope {
    var x = void, y = void;
    [ x for x in [10,20,30] ];
    assert_equal(x, void, '1');
    
    [ x * y for x in [10,20,30], y in [40, 50, 60] ];
    assert_equal(x, void, '2');
    assert_equal(y, void, '3');
    
    %[ x : x * y for x in [10,20,30], y in [40, 50, 60] ];
    assert_equal(x, void, '2');
    assert_equal(y, void, '3');
  }
  
  function test_main {
    var a = [ x for x in [10,20,30] ];
    assert_equal_struct(a, [10,20,30], '1');
    
    a = [ x * 2 for x in [10,20,30] ];
    assert_equal_struct(a, [20,40,60], '2');
    
    var array = [10,20,30];
    a = [ x for x in array ];
    assert_equal_struct(a, [10,20,30], '3');
    
    a = [ x * 2 for x in array ];
    assert_equal_struct(a, [20,40,60], '4');
    
    var array1 = [2,3,4];
    var array2 = [5,6,7];
    a = [ x * y for x in array1, y in array2 ];
    assert_equal_struct(a, [10,12,14,15,18,21,20,24,28], '5');
    
    a = [ x for x in array, x % 20 == 0 ];
    assert_equal_struct(a, [20], '6');
    
    a = [ x * y for x in array, x % 20 != 0, y in array ];
    assert_equal_struct(a, [100,200,300,300,600,900], '7');
    
    a = [ x * y for x in array, x % 20 != 0, y in array, y % 20 == 0 ];
    assert_equal_struct(a, [200,600], '8');
    
    a = %[ x : y * 2 for x in [2, 3, 4], y in [5, 6, 7] ];
    assert_equal_struct(a, %[x:14], '9');
    
    a = %[ x => y * 2 for x in [2, 3, 4], y in [5, 6, 7] ];
    assert_equal_struct(a, %[2,14,3,14,4,14], '10');
    
    a = %[ x => y * 2 for x in [2, 3, 4], y in [5, 6, 7], y < x * 2 ];
    assert_equal_struct(a, %[3,10,4,14], '11');
  }
  
}
