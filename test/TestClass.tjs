class Test {
  
  var tests = [];
  var name;
  
  function init {
    Test.__results__ = [];
  }
  
  function puts(str) {
    Debug.message(str);
  }
  
  function showResult {
    var r = Test.__results__;
    for (var i = 0; i < r.count; ++i) Debug.message('\r' + r[i].toString());
  }
  
  function Test(name) {
    this.name = name;
  }
  
  function toString(obj) {
    if (obj === void) return 'void';
    if (obj === null) return 'null';
    if (obj instanceof 'Array') {
      var items = [];
      for (var i = 0, e = obj.count; i <e; ++i) items.add(toString(obj[i]));
      return @'[${items.join(", ")}]';
    }
    if (obj instanceof 'Dictionary') {
      var keys = obj->keys();
      var items = [];
      for (var i = 0, e = keys.count; i < e; ++i) items.add(@'${keys[i]}: ${toString(obj[keys[i]])}');
      return @'%[${items.join(", ")}]';
    }
    if (typeof obj === 'String') return @'"${obj}"';
    
    try {
      return obj.toString();
    } catch {
      return (string)obj;
    }
  }
  
  function equal_struct(obj1, obj2) {
    if ((typeof obj1) !== (typeof obj2))
      return false;
    switch (typeof obj1) {
    case 'void': return true;
    case 'Integer':
    case 'Real':
    case 'String':
      return obj1 === obj2;
    case 'Object':
      if (obj1 === null || obj2 === null) {
        return (obj1 === null) && (obj2 === null);
      }
      if (obj1 instanceof 'Array' && obj2 instanceof 'Array') {
        if (obj1.count !== obj2.count) return false;
        for (var i = 0, e = obj1.count; i < e; ++i) {
          if (!equal_struct(obj1[i], obj2[i])) return false;
        }
        return true;
      }
      if (obj1 instanceof 'Dictionary' && obj2 instanceof 'Dictionary') {
        var a1 = [], a2 = [];
        a1.assign(obj1);
        a2.assign(obj2);
        if (a1.count != a2.count) return false;
        var key1 = a1.filter(-> (x, i) [ i % 2 == 0 ]);
        var key2 = a2.filter(-> (x, i) [ i % 2 == 0 ]);
        key1.sort(); key2.sort();
        if (!equal_struct(key1, key2)) return false;
        for (var i = 0, e = key1.count; i < e; ++i) {
          if (!equal_struct(obj1[key1[i]], obj2[key1[i]])) return false;
        }
        return true;
      }
      //throw new Exception('Object: Not Implemented');
      return false;
    case 'Octet':
      throw new Exception('Octet: Not Implemented');
    default:
      throw new Exception('must not happen!');
    }
  }
  
  function assert(v, str='') {
    if (v) return true;
    str = str.length ? @'${str}: ' : '';
    throw new Exception(@'${str}assertion failed');
  }
  
  function assert_not(v, str='') {
    if (!v) return true;
    str = str.length ? @'${str}: ' : '';
    throw new Exception(@'${str}assertion failed');
  }
  
  function assert_equal(v, expected, str='') {
    if (v === expected) return true;
    v = toString(v);
    var ex = toString(expected);
    str = str.length ? @'${str}: ' : '';
    throw new Exception(@'${str}${ex} is expected, but ${v}');
  }
  
  function assert_not_equal(v, not_expected, str='') {
    if (v !== not_expected) return true;
    v = toString(v);
    var ex = toString(not_expected);
    str = str.length ? @'${str}: ' : '';
    throw new Exception(@'${str}${ex} is not expected, but ${v}');
  }
  
  function assert_include(v, array, str='') {
    for (var i = 0; i < array.count; ++i)
      if (equal_struct(v, array[i])) return true;
    str = str.length ? @'${str}: ' : '';
    throw new Exception(@'${str}one of ${toString(array)} is not expected, but ${toString(v)}');
  }
  
  function assert_throw(fn, str='') {
    try { fn(); } catch { return true; }
    throw new Exception(str + ' (exception expected, but not happen)');
  }
  
  function assert_array_equal(v, expected, str='') {
    var str1 = str.length ? @'${str}: ' : '';
    if (!(v instanceof 'Array') || !(expected instanceof 'Array'))
      throw new Exception(@'${str1}non-array object given');
    if (v.count !== expected.count)
      throw new Exception(@'${str1}expected length is ${expected.count}, but ${v.count}');
    for (var i = 0, e = v.count; i < e; ++i) {
      var x = v[i];
      var y = expected[i];
      if (x instanceof 'Array') {
        assert_array_equal(x, y, str);
      } else if (x !== y) {
        throw new Exception(@'${str1}[at index ${i}] ${toString(y)} is expected, but ${toString(x)}');
      }
    }
    return true;
  }
  
  function assert_equal_struct(v, expected, str='') {
    if (equal_struct(v, expected)) return true;
    if (v === expected) return true;
    v = toString(v);
    var ex = toString(expected);
    str = str.length ? @'${str}: ' : '';
    throw new Exception(@'${str}${ex} is expected, but ${v}');
  }
  
  function setup() { }
  
  function teardown() { }
  
  function run(puts_now=false) {
    var result = new TestResult(name);
    
    for (var i = 0; i < tests.count; ++i) {
      var test = tests[i];
      if (test === void || test.length === 0) continue;
      setup();
      try {
        this[test]();
        result.add(test, true);
      } catch (e) {
        var str = e ? e.message : 'unknown error (VOID Exception)';
        result.add(test, false, str);
      }
      teardown();
    }
    
    global.Test.__results__.add(result);
    if (puts_now) puts(result.toString());
  }
  
  class TestResult {
    var name;
    var results = [];
    
    function TestResult(name) { this.name = name; }
    
    function add(test_name, is_successed, message) {
      message = 'successed' if (!message && is_successed);
      message = '' if message.length === 0;
      results.add([is_successed, test_name, message]);
    }
    
    function toString(with_color=true) {
      var green = with_color ? '\033[32m' : '';
      var red = with_color ? '\033[31m' : '';
      var normal = with_color ? '\033[0m' : '';
      
      var banner = @'@@@ TEST ${name} '; while (banner.length < 80) banner += '=';
      banner += '\n';
      
      var r = [];
      var successed = 0;
      var failed = 0;
      for (var i = 0; i < results.count; ++i) {
        var rs = results[i];
        r.add(@'|  ${rs[0] ? green : red}${rs[1]}: ${rs[2]}${normal}');
        successed += 1 if rs[0];
        failed += 1 if !rs[0];
      }
      
      var summary = failed ? @'|>  ${red}FAIL ${failed} TESTS${normal}' : @'|>  ${green}SUCCESS ALL TESTS${normal}';
      
      if (failed) {
        var line = '|-'; while (line.length < banner.length) line += '-';
        line += '\n';
        return banner + summary + '\n' + line + r.join('\n');
      } else {
        return banner + summary;
      }
    }
  }
}
