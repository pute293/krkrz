(new TestArrow()).run();

class TestArrow extends Test {
  
  var name = 'ARROW';
  var tests = [
    'test_void_statement',
    'test_void_expr',
    'test_null_expr',
    'test_identity',
    'test_expr',
    'test_statement',
    'test_deep',
    'test_new',
    'test_args',
    'test_context'
  ];
  
  function test_void_statement {
    var f1 = -> x { };
    var f2 = -> { };
    var f3 = -> x { x * 2; };
    assert_equal(f1(), void, 'expr void');
    assert_equal(f2(), void, 'stmt void 1');
    assert_equal(f3(), void, 'stmt void 2');
  }
  
  function test_void_expr {
    var fn = -> [];
    assert_equal(fn(), void);
  }
  
  function test_null_expr {
    var fn = -> [ null ];
    assert_equal(fn(), null);
  }
  
  function test_identity {
    var fn = -> x [ x ];
    var gn = -> x { return x; };
    assert_equal(fn(10), 10, 'expr identity');
    assert_equal(gn(10), 10, 'stmt identity');
  }
  
  function test_expr {
    var f1 = -> x [ x * 2 ];
    var f2 = -> x [ x * 2 + 3 * (5 - x) ];
    assert_equal(f1(10), 20, 'twice');
    assert_equal(f2(10), 5, 'long');
  }
  
  function test_statement {
    var f1 = -> x { return x * 2; };
    var f2 = -> x { return x * 2 + 3 * (5 - x); };
    assert_equal(f1(10), 20, 'twice');
    assert_equal(f2(10), 5, 'long');
  }
  
  function test_deep {
    var f1 = -> x { return x + 1; };
    var f2 = -> x { return f1(x); } incontextof %[f1:f1];
    assert_equal(f2(10), 11, 'stmt');
    var f3 = -> x [ x + 1 ];
    var f4 = -> x [ f3(x) ] incontextof %[f3:f3];
    assert_equal(f4(10), 11, 'expr');
  }
  
  function test_new {
    var f1 = -> { return new TestArrow(); };
    var f2 = -> { return TestArrow(); };
    var f3 = -> [ new TestArrow() ];
    var f4 = -> [ TestArrow() ];
    assert_equal(typeof f1(), 'Object', 'stmt 1');
    assert_equal(typeof f2(), 'void',   'stmt 2');
    assert_equal(typeof f3(), 'Object', 'expr 1');
    assert_equal(typeof f4(), 'void',   'expr 2');
  }
  
  function test_args {
    var f1 = -> (x, y) [ x * y ];
    var f2 = -> (x, args*) [ x * args.reduce(-> (acc, cur) [ acc + cur ]) ];
    var f3 = -> (ary*) [ ary.reduce(-> (acc, cur) [acc + cur]) ];
    var f4 = -> (x, *) [ x * f3(*) ] incontextof %[f3:f3];
    var f5 = -> (x, y = 10) [ x * y ];
    var f6 = -> (a : int, b : int = 10) : int [ a * b ];
    assert_equal(f1(10, 20), 200, 'multiple arguments');
    assert_equal(f2(10, 1, 2, 3, 4, 5, 6, 7, 8, 9),    450, 'array argument 1');
    assert_equal(f2(10, [1, 2, 3, 4, 5, 6, 7, 8, 9]*), 450, 'array argument 2');
    assert_equal(f4(10, 1, 2, 3, 4, 5, 6, 7, 8, 9),    450, 'array argument 3');
    assert_equal(f5(5), 50, 'default argument');
    assert_equal(f6(5), 50, 'type annotation');
  }
  
  function test_context {
    var d = %[a:37];
    var f1 = -> [ a = 10 ] incontextof d;
    assert_equal(f1(), 10, 'change 1');
    assert_equal(d.a, 10, 'context change');
  }
  
}
