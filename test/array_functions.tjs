(new TestArrayFunctions()).run();

class TestArrayFunctions extends Test {
  
  var name = 'ARRAY FUNCTIONS';
  var tests = [
    'test_clone',
    'test_each',
    'test_map',
    'test_filter',
    'test_reduce'
  ];
  
  var array0;
  var array;
  
  function setup() {
    array0 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];
    array = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];
  }
  
  function test_clone {
    array.clone();
    var a = array.clone();
    assert_not_equal(a, array, 'clone returns same object');
    assert_array_equal(a, array, 'clone failed');
    a[0] = 100;
    assert_equal(array[0], 0, 'clone deeply???');
    assert_array_equal(array, array0, 'clone breaks an array');
  }
  
  function test_each {
    var n = %[n:0,i:0,b:true];
    array.each(function(item, idx, a){ n += item; b &= i == idx && a === "a"; i += 1; } incontextof n, "a");
    assert_equal(n.n, 45, @'each failed ${n.n} ${n.b}');
    assert_throw(function(){array.each(null);}, 'an exception was not thrown');
    assert_array_equal(array, array0, 'each breaks an array');
    var a = array.each(function(item, idx, a){ n += item; b &= i == idx && a === "a"; i += 1; } incontextof n, "a");
  }
  
  function test_map {
    array.map(function(item){return item * 2;});
    var a = array.map(function(item){return item * 2;});
    assert_array_equal(
             array.map(function(item){return item * 2;}),
             [0, 2, 4, 6, 8, 10, 12, 14, 16, 18],
           "map fail");
    assert_array_equal(array, array0, "map breaks an array");
  }
  
  function test_filter {
    array.filter(function(item){return item % 2 == 0;});
    var a = array.filter(function(item){return item % 2 == 0;});
    assert_array_equal(array.filter(function(item){return item % 2 == 0;}), [0, 2, 4, 6, 8], "filter fail");
    assert_array_equal(array.filter(function(item){return [];}), array, "filter fail");
    assert_array_equal(array, array0, "filter breaks an array");
  }
  
  function test_reduce {
    array.reduce(function(acc, item){return acc + item;});
    var a = array.reduce(function(acc, item){return acc + item;});
    assert_equal(array.reduce(function(acc, item){return acc + item;}), 45, 'reduce fail 1');
    assert_equal(array.reduce(function(acc, item){return acc + item;}, 10), 55, @'reduce fail 2');
    assert_equal([].reduce(function(acc, item){return acc + item;}), void, 'reduce empty 1');
    assert_equal([].reduce(function(acc, item){return acc + item;}, 1), 1, 'reduce empty 2');
    assert_array_equal(array, array0, "reduce breaks an array");
  }
}
