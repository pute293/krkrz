(new TestArrayFunctions()).run();

class TestArrayFunctions extends Test {
  
  var name = 'ARRAY FUNCTIONS';
  var tests = [
    'test_clone',
    'test_each',
    'test_map',
    'test_filter',
    'test_reduce'
  ];
  
  var array0;
  var array;
  
  function setup() {
    array0 = [10, 11, 12, 13, 14, 15, 16, 17, 18, 19];
    array  = [10, 11, 12, 13, 14, 15, 16, 17, 18, 19];
  }
  
  function test_clone {
    array.clone();
    var a = array.clone();
    assert_not_equal(a, array, 'clone returns same object');
    assert_array_equal(a, array, 'clone failed');
    a[0] = 100;
    assert_equal(array[0], 10, 'clone deeply???');
    assert_array_equal(array, array0, 'clone breaks an array');
  }
  
  function test_each {
    var n = %[n: 0, i: 0, self: this];
    var r = array.each(function (item, idx, x, y) {
      self.assert_equal(idx, i, @'1 (idx=${idx})');
      self.assert_equal(x, 'a', @'2 (idx=${idx})');
      self.assert_equal(y, void, @'3 (idx=${idx})');
      n += item;
      i += 1;
    } incontextof n, 'a');
    assert_equal(n.n, 145, '4');
    assert_equal(r, void, '5');
    assert_throw(function(){array.each(null);}, 'an exception was not thrown');
    assert_array_equal(array, array0, 'each breaks an array');
  }
  
  function test_map {
    var n = %[i: 0, self: this];
    var array1 = array.map(function (item, idx, x, y) {
      self.assert_equal(idx, i, @'1 (idx=${idx})');
      self.assert_equal(x, 'a', @'2 (idx=${idx})');
      self.assert_equal(y, void, @'3 (idx=${idx})');
      i += 1;
      return item * 2;
    } incontextof n, 'a');
    assert_array_equal(array1, [20, 22, 24, 26, 28, 30, 32, 34, 36, 38], '4');
    assert_throw(function(){array.map(null);}, 'an exception was not thrown');
    assert_array_equal(array, array0, 'map breaks an array');
  }
  
  function test_filter {
    var n = %[i: 0, self: this];
    var array1 = array.filter(function (item, idx, x, y) {
      self.assert_equal(idx, i, @'1 (idx=${idx})');
      self.assert_equal(x, 'a', @'2 (idx=${idx})');
      self.assert_equal(y, void, @'3 (idx=${idx})');
      i += 1;
      return item % 3 === 0;
    } incontextof n, 'a');
    assert_array_equal(array1, [12, 15, 18], '4');
    assert_throw(function(){array.filter(null);}, 'an exception was not thrown');
    assert_array_equal(array, array0, 'filter breaks an array');
  }
  
  function test_reduce {
    var n = %[i: 0, self: this];
    var r = array.reduce(function (acc, item, idx, x, y) {
      self.assert_equal(idx, i, @'1 (idx=${idx})');
      self.assert_equal(x, void, @'2 (idx=${idx})');
      self.assert_equal(y, void, @'3 (idx=${idx})');
      i += 1;
      return acc + item;
    } incontextof n);
    assert_equal(r, 145, '4');
    assert_throw(function(){array.reduce(null);}, 'an exception was not thrown');
    assert_array_equal(array, array0, 'reduce breaks an array 1');
    
    assert_equal(array.reduce(function(acc, item){return acc + item;}, 10), 155, 'init value');
    assert_equal([].reduce(function(acc, item){return acc + item;}), void, 'reduce empty 1');
    assert_equal([].reduce(function(acc, item){return acc + item;}, 1), 1, 'reduce empty 2');
    
    assert_array_equal(array, array0, 'reduce breaks an array 2');
  }
}
