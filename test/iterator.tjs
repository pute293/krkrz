(new TestIterator()).run();

class TestIterator extends Test {
  
  var name = 'ITERATOR';
  var tests = [
    'test_1',
    'test_each',
    'test_map',
    'test_filter',
    'test_drop',
    'test_take',
    'test_all',
    'test_any',
    'test_none'
    //'test_forin_iterator',
    //'test_forin_array',
    //'test_forin_dict'
  ];
  var ctx;
  var a;
  
  class A extends Iterator {
    var i = 0;
    var array = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100];
    function next { return array[i++]; }
    function hasNext { return i < array.count; }
  }
  
  class B extends Iterator {
    var i = 0;
    function next { return i * 3; }
    function hasNext { return true; }
  }
  
  class ArrayIt extends Iterator {
    var a;
    var i = 0;
    function ArrayIt(array=[10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) { a = array; }
    function next { return a[i++]; }
    function hasNext { return i < a.count; }
    function reset { i = 0; }
  }
  
  function setup {
    ctx = %[idx: 0, self: this];
    a = new A();
  }
  
  function teardown {
    invalidate ctx;
    invalidate a;
  }
  
  function test_1 {
    var b = [];
    while (a.hasNext()) {
      b.add(a.next());
    }
    assert_equal_struct(b, a.array);
  }
  
  function test_each {
    // with return
    ctx.t = [];
    assert_equal(a.each(function (x, i, y, z) {
      self.assert_equal(x, (idx+1)*10, 'arg 1');
      self.assert_equal(i, idx, 'arg 2');
      self.assert_equal(y, 'a', 'arg 3');
      self.assert_equal(z, void, 'arg 4');
      t.add(x);
      idx += 1;
      return x;
    } incontextof ctx, 'a'), void, 'with return');
    assert_equal_struct(ctx.t, [10,20,30,40,50,60,70,80,90,100], 'invalid arg');
    a.each(->x[t.clear()] incontextof ctx);
    assert_equal_struct(ctx.t, [10,20,30,40,50,60,70,80,90,100], 'not exhausted');
    
    a = new A();
    assert_throw(-> [ (new A()).each() ], 'empty arg');
    assert_throw(-> [ (new A()).map(null) ], 'null arg');
    
    // without return
    ctx.idx = 0;
    assert_equal(a.each(function (x, i, y, z) {
      self.assert_equal(x, (idx+1)*10, 'arg 5');
      self.assert_equal(i, idx, 'arg 6');
      self.assert_equal(y, 'a', 'arg 7');
      self.assert_equal(z, void, 'arg 8');
      idx += 1;
    } incontextof ctx, 'a'), void, 'without return');
  }
  
  function test_map {
    // with return
    assert_equal_struct(a.map(function (x, i, y, z) {
      self.assert_equal(x, (idx+1)*10, 'arg 1');
      self.assert_equal(i, idx,  'arg 2');
      self.assert_equal(y, 'a',  'arg 3');
      self.assert_equal(z, void, 'arg 4');
      idx += 1;
      return x * 2;
    } incontextof ctx, 'a'), [20,40,60,80,100,120,140,160,180,200], 'with return');
    assert_equal_struct(a.map(->x[x]), [], 'not exhausted');
    assert_throw(-> [ (new A()).map() ], 'empty arg');
    assert_throw(-> [ (new A()).map(null) ], 'null arg');
    
    // without return
    assert_equal_struct((new A()).map(function(x){x * 2;}), [void,void,void,void,void,void,void,void,void,void], 'without return');
  }
  
  function test_filter {
    // with return
    assert_equal_struct(a.filter(function (x, i, y, z) {
      self.assert_equal(x, (idx+1)*10, 'arg 1');
      self.assert_equal(i, idx,  'arg 2');
      self.assert_equal(y, 'a',  'arg 3');
      self.assert_equal(z, void, 'arg 4');
      idx += 1;
      return x % 3 === 0;
    } incontextof ctx, 'a'), [30,60,90], 'with return');
    assert_equal_struct(a.filter(->x[true]), [], 'not exhausted');
    assert_throw(-> [ (new A()).filter() ], 'empty arg');
    assert_throw(-> [ (new A()).filter(null) ], 'null arg');
    
    // without return
    assert_equal_struct(a.filter(function(x){x % 3 === 0;}), [], 'without return');
  }
  
  function test_drop {
    assert_equal_struct(a.drop(5), [60,70,80,90,100], 'drop(5)');
    assert_equal_struct(a.drop(3), [], 'not exhausted');
    assert_throw(-> [ (new A()).drop() ], 'empty arg');
    assert_throw(-> [ (new A()).drop(null) ], 'null arg');
  }
  
  function test_take {
    assert_equal_struct(a.take(3), [10,20,30], 'take(3)');
    assert_equal_struct(a.take(7), [40,50,60,70,80,90,100], 'take(7)');
    assert_equal_struct(a.take(3), [], 'not exhausted');
    assert_throw(-> [ (new A()).take() ], 'empty arg');
    assert_throw(-> [ (new A()).take(null) ], 'null arg');
  }
  
  function test_all {
    // with return
    // all を呼んだあとのイテレータの位置は不定
    // 空のイテレータには true を返す
    assert_equal(a.all(function (x, i, y, z) {
      self.assert_equal(x, (idx+1)*10, 'arg 1');
      self.assert_equal(i, idx,  'arg 2');
      self.assert_equal(y, 'a',  'arg 3');
      self.assert_equal(z, void, 'arg 4');
      idx += 1;
      return x % 10 === 0;
    } incontextof ctx, 'a'), true, 'with return 1');
    assert_equal((new A()).all(->x[x%20===0]), false, 'with return 2');
    
    assert_equal((new ArrayIt()).all(->x[x]), true, 'array it');
    assert_equal((new ArrayIt([])).all(->x[false]), true, 'empty it');
    assert_throw(-> [ (new A()).all() ], 'empty arg');
    assert_throw(-> [ (new A()).all(null) ], 'null arg');
    
    // without return
    assert_equal((new A()).all(->{}), false, 'without return');
  }
  
  function test_any {
    // with return
    // any を呼んだあとのイテレータの位置は不定
    // 空のイテレータには false を返す
    assert_equal(a.any(function (x, i, y, z) {
      self.assert_equal(x, (idx+1)*10, 'arg 1');
      self.assert_equal(i, idx,  'arg 2');
      self.assert_equal(y, 'a',  'arg 3');
      self.assert_equal(z, void, 'arg 4');
      idx += 1;
      return x % 10 === 0;
    } incontextof ctx, 'a'), true, 'with return 1');
    assert_equal((new A()).any(->x[x%33===0]), false, 'with return 2');
    
    assert_equal((new ArrayIt([])).any(->x[false]), false, 'empty it');
    assert_throw(-> [ (new A()).any() ], 'empty arg');
    assert_throw(-> [ (new A()).any(null) ], 'null arg');
    
    // without return
    assert_equal((new A()).any(->{}), false, 'without return');
  }
  
  function test_none {
    // with return
    // any を呼んだあとのイテレータの位置は不定
    // 空のイテレータには true を返す
    assert_equal(a.none(function (x, i, y, z) {
      self.assert_equal(x, (idx+1)*10, 'arg 1');
      self.assert_equal(i, idx,  'arg 2');
      self.assert_equal(y, 'a',  'arg 3');
      self.assert_equal(z, void, 'arg 4');
      idx += 1;
      return x % 33 === 0;
    } incontextof ctx, 'a'), true, 'with return 1');
    assert_equal((new A()).none(->x[x%100===0]), false, 'with return 2');
    
    assert_equal((new ArrayIt([])).none(->x[false]), true, 'empty it');
    assert_throw(-> [ (new A()).none() ], 'empty arg');
    assert_throw(-> [ (new A()).none(null) ], 'null arg');
    
    // without return
    assert_equal((new A()).none(->{}), true, 'without return');
  }
  
  /*function test_forin_iterator {
    var a = new A();
    var b = [], c = [];
    var x = void;
    for (var x in a) {
      b.add(x);
    }
    assert_equal(x, void, 'x1');
    
    for (x in new A()) {
      c.add(x);
    }
    assert_equal(x, 100, 'x2');
    
    assert_equal_struct(b, a.array, '1');
    assert_equal_struct(c, a.array, '2');
  }
  
  function test_forin_array {
    var a = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100];
    var b = [], c = [], d = [];
    var x = void;
    for (var x in a) {
      b.add(x);
    }
    assert_equal(x, void, '1');
    assert_equal_struct(a, [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], '2');
    assert_equal_struct(b, a, '3');
    
    for (var x in [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) {
      c.add(x);
    }
    assert_equal(x, void, '4');
    assert_equal_struct(c, a, '5');
    
    for (x in a) {
      d.add(x);
    }
    assert_equal(x, 100, '6');
    assert_equal_struct(a, [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], '7');
    assert_equal_struct(d, a, '8');
  }
  
  function test_forin_dict {
    var a = %[
      a : 10,
      b : 20,
      c : 30
    ];
    var b = %[], c = %[], d = %[];
    var x = void;
    for (var x in a) {
      b[x.key] = x.value;
    }
    assert_equal(x, void, '1');
    assert_equal_struct(a, [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], '2');
    assert_equal_struct(b, a, '3');
    
    for (var x in [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) {
      c.add(x);
    }
    assert_equal(x, void, '4');
    assert_equal_struct(c, a, '5');
    
    for (x in a) {
      d.add(x);
    }
    assert_equal(x, 100, '6');
    assert_equal_struct(a, [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], '7');
    assert_equal_struct(d, a, '8');
  }*/
  
}

